{"version":3,"sources":["components/Error/index.tsx","pages/bones/controller/actions.ts","pages/bones/index.tsx"],"names":["DEFAULT_LABEL","Error","props","bReload","Boolean","react","content","onClick","onReload","reloadLabel","renderDemo","type","t","payload","bindActionCreators","requestRenderData","dispatch","getState","requestGetCard","requestGetCard2","renderDemoFn","store","Portrait","info","name","Rights","egg","connect","state","double","React","actions","bInitial","rights","current","components_Error"],"mappings":"uHAEMA,EAAgB,2BAiCPC,MA1Bf,SAAeC,GAMX,IAAMC,EAAUC,QAAQF,EAAMC,SAE9B,OACIE,EAAA,yBAEQH,EAAMI,QAAUJ,EAAMI,QAAU,MAGhCH,EACIE,EAAA,wBAAQE,QAdxB,WACkC,oBAAnBL,EAAMM,UACbN,EAAMM,aAcUN,EAAMO,aAAeT,GAG3B,iCCwETU,EAAa,CACtBC,KAAMC,IACNC,QAAS,QA6BEC,cAAmB,CAC9BC,kBArBsB,WACtB,OAAO,SAACC,EAAeC,GACnBD,EA1BG,CACHL,KAAMC,QA6CVM,eAtGmB,WACnB,OAAO,SAACF,EAAeC,GACnBD,EAlBG,CACHL,KAAMC,QAsHVO,gBAnEoB,WACpB,OAAO,SAACH,EAAeC,GACnBD,EAlBG,CACHL,KAAMC,QAmFVQ,aAtCiB,WACjB,OAAOV,IAsCRW,IAAML,UCrHT,SAASM,EAASC,GACjB,OAAKA,EAAKC,KAITnB,EAAA,yBACCA,EAAA,mCAGAA,EAAA,0BACCA,EAAA,kCAGAA,EAAA,uCAIDA,EAAA,uDAfM,KA0BT,SAASoB,EAAOC,GACf,OAAOrB,EAAA,iCA4COsB,sBAJf,SAAyBC,GAExB,OADmBA,EAAXC,QAGMF,CAjCf,SAAezB,GAad,OAXA4B,YAAgB,WACfC,EAAQhB,oBACRgB,EAAQX,gBACN,IAQClB,EAAM8B,SACF,KAGH9B,EAAMqB,KAAKC,MAAStB,EAAM+B,OAAOC,QAKrC7B,EAAA,yBACCA,EAAA,cAACiB,EAAapB,EAAMqB,MACpBlB,EAAA,cAACoB,EAAWvB,EAAM+B,SANZ5B,EAAA,cAAC8B,EAAD,CAAOhC,SAAS","file":"static/js/28.27b14cd6.chunk.js","sourcesContent":["import * as React from 'react';\n\nconst DEFAULT_LABEL = '重新请求';\ninterface IError {\n    bReload: boolean;\n    reloadLabel?: string;\n    content?: React.ReactChild;\n    onReload?: () => any;\n}\nfunction Error(props: IError) {\n    function onReload() {\n        if (typeof props.onReload === 'function') {\n            props.onReload();\n        }\n    }\n    const bReload = Boolean(props.bReload);\n\n    return (\n        <div>\n            {\n                props.content ? props.content : '404'\n            }\n            {\n                bReload ?\n                    <button onClick={onReload}>\n                        {\n                            props.reloadLabel || DEFAULT_LABEL\n                        }\n                    </button>\n                    : null\n            }\n        </div>\n    )\n}\n\nexport default Error;","/*\n一般情况下你可以直接在 Store 实例上调用 dispatch。如果你在 React 中使用 Redux，react-redux 会提供 dispatch 函数让你直接调用它 。\n惟一会使用到 bindActionCreators 的场景是当你需要把 action creator 往下传到一个组件上，却不想让这个组件觉察到 Redux 的存在，\n而且不希望把 dispatch 或 Redux store 传给它\n// 注入dispatch的地方有：\n    1、redux-thunk会向异步action直接注入dispatch和getState\n    2、bindActionCreators会直接使用dispatch触发actionCreators\n    3、react-redux会注入dispatch（待补充细节）\n */ \nimport { bindActionCreators, ActionCreator, AnyAction } from 'redux';\nimport * as t from './type';\n// import * as apis from '@/apis/mock';\nimport store from '@/store';\n\n\nconst getCrad: ActionCreator<AnyAction> = () => {\n    return {\n        type: t.GET_CARD\n    }\n}\n// const getCradSuccess: ActionCreator<AnyAction> = (data: any) => {\n//     return {\n//         type: t.GET_CARD_SUCCESS,\n//         payload: data\n//     }\n// }\n// const getCradFailure: ActionCreator<AnyAction> = (err: any) => {\n//     return {\n//         type: t.GET_CARD_FAILURE,\n//         payload: err\n//     }\n// }\nconst requestGetCard = () => {\n    return (dispatch: any, getState: any) => {\n        dispatch(getCrad());\n        // return apis.getCard().then((res: any) => {\n        //     if (res.code === 0) {\n        //         dispatch(getCradSuccess(res.data));\n        //         return res;\n        //     }\n        //     else {\n        //         dispatch(getCradFailure(res));\n        //         return Promise.reject(res);\n        //     }\n        // }).catch((err: any) => {\n        //     dispatch(getCradFailure(err));\n        //     return Promise.reject(err);\n        // })\n    }\n}\n\nconst getCrad2: ActionCreator<AnyAction> = () => {\n    return {\n        type: t.GET_CARD2\n    }\n}\n// const getCradSuccess2: ActionCreator<AnyAction> = (data: any) => {\n//     return {\n//         type: t.GET_CARD_SUCCESS2,\n//         payload: data\n//     }\n// }\n// const getCradFailure2: ActionCreator<AnyAction> = (err: any) => {\n//     return {\n//         type: t.GET_CARD_FAILURE2,\n//         payload: err\n//     }\n// }\nconst requestGetCard2 = () => {\n    return (dispatch: any, getState: any) => {\n        dispatch(getCrad2());\n        // return apis.getCard().then((res: any) => {\n        //     if (res.code === 0) {\n        //         dispatch(getCradSuccess(res.data));\n        //         return res;\n        //     }\n        //     else {\n        //         dispatch(getCradFailure(res));\n        //         return Promise.reject(res);\n        //     }\n        // }).catch((err: any) => {\n        //     dispatch(getCradFailure(err));\n        //     return Promise.reject(err);\n        // })\n    }\n}\n\nconst renderUI: ActionCreator<AnyAction> = () => {\n    return {\n        type: t.RENDER_UI\n    }\n}\n// const renderUISuccess: ActionCreator<AnyAction> = (data: any) => {\n//     return {\n//         type: t.RENDER_UI_SUCCESS,\n//         payload: data\n//     }\n// }\nconst renderDemoFn = () => {\n    return renderDemo\n}\nexport const renderDemo = {\n    type: t.RENDER_UI,\n    payload: 'demo'\n}\n// const renderUIFailure: ActionCreator<AnyAction> = (err: any) => {\n//     return {\n//         type: t.RENDER_UI_FAILURE,\n//         payload: err\n//     }\n// }\n// 异步action\nconst requestRenderData = () => {\n    return (dispatch: any, getState: any) => {\n        dispatch(renderUI());\n        // return Promise.all([apis.getCard(), apis.getCard2()]).then((res: any) => {\n        //     const [res1, res2] = res;\n        //     if (res1.code === 0 && res2.code === 0) {\n        //         dispatch(renderUISuccess(res));\n        //         return res;\n        //     }\n        //     else {\n        //         dispatch(renderUIFailure(res));\n        //         return Promise.reject(res);\n        //     }\n        // }).catch((err: any) => {\n        //     dispatch(renderUIFailure(err));\n        //     return Promise.reject(err);\n        // })\n    }\n}\n\nexport default bindActionCreators({\n    requestRenderData,\n    requestGetCard,\n    requestGetCard2,\n    renderDemoFn\n}, store.dispatch);","/* \n\t目的：\n\t\t1、INITIAL视觉：使用骨骼图代替，并展示请求进度\n\t\t2、SUCCESS视觉：正常渲染\n\t\t3、FAILURE视觉：第一次请求失败和后续请求失败两种场景\n\t\t3-1：第一次请求失败\n\t\t3-2：第二次请求失败\n */\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport Error from 'Components/Error';\nimport actions from './controller/actions';\n\n// portrait\ninterface IPortrait {\n\tname: string;\n\tdeadline: number;\n\tportrait: string;\n}\n\nfunction Portrait(info: IPortrait) {\n\tif (!info.name) {\n\t\treturn null\n\t}\n\treturn (\n\t\t<div>\n\t\t\t<span>\n\t\t\t\timage\n\t\t\t</span>\n\t\t\t<span>\n\t\t\t\t<span>\n\t\t\t\t\tname\n\t\t\t\t</span>\n\t\t\t\t<span>\n\t\t\t\t\tdeadline\n\t\t\t\t</span>\n\t\t\t</span>\n\t\t\t<span>\n\t\t\t\t续期与否\n\t\t\t</span>\n\t\t</div>\n\t)\n}\n\ninterface IEgg {\n\tcurrent: number;\n}\n\nfunction Rights(egg: IEgg) {\n\treturn <div>\n\t\teggs\n\t</div>\n}\n\ninterface IProps {\n\tbInitial: boolean;\n\tinfo: IPortrait;\n\trights: IEgg;\n}\n\nfunction Bones(props: IProps) {\n\t// 两个（多个）接口同时返回数据，才会渲染UI\n\tReact.useEffect(() => {\n\t\tactions.requestRenderData();\n\t\tactions.renderDemoFn()\n\t}, [])\n\t// 两个（多个）接口任一个返回，就渲染UI\n\t// 第一个返回失败，第二返回成功；UI不可控\n\t// React.useEffect(() => {\n\t// \tactions.requestGetCard();\n\t// \tactions.requestGetCard2();\n\t// }, []);\n\n\tif (props.bInitial) {\n\t\treturn null;/* <Default /> */\n\t}\n\n\tif (!props.info.name && !props.rights.current) {\n\t\treturn <Error bReload={false} />\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<Portrait {...props.info} />\n\t\t\t<Rights {...props.rights} />\n\t\t</div>\n\t)\n\n}\nfunction mapStateToProps(state: any) {\n\tconst { double } = state;\n\treturn double;\n}\nexport default connect(mapStateToProps)(Bones);"],"sourceRoot":""}