{"version":3,"sources":["context.tsx","pages/context/index.tsx","utils/helper.ts"],"names":["__webpack_require__","d","__webpack_exports__","ThemeContext","react__WEBPACK_IMPORTED_MODULE_0__","createContext","Toolbar","_React$Component","_inherits","_super","_createSuper","_classCallCheck","this","apply","arguments","_createClass","key","value","console","log","concat","props","type","context","React","Tooltip","Consumer","contextType","Context","_React$Component2","_super2","_this","call","onChangeContext","setState","onUploadFile","event","file","target","files","fileName","name","split","fileRead","FileReader","that","_assertThisInitialized","onloadend","_this2","result","originImage","imgSrc","width","length","undefined","mimeType","quality","Promise","resolve","reject","img","Image","src","onload","scale","height","canvas","document","createElement","ctx","getContext","drawImage","toBlob","blob","compressImage","then","res","newImage","File","lastModified","Date","now","RD","compressedImage","readAsDataURL","catch","err","state","other","_this$state","alt","multiple","onChange","onClick","Provider"],"mappings":"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","file":"static/js/16.63e3b352.chunk.js","sourcesContent":["import { createContext } from 'react'\n\nexport const ThemeContext = createContext('globalContext-default')","import * as React from 'react';\nimport { ThemeContext } from '../../context';\nimport { compressImage } from '@/utils/helper';\ninterface IProps {}\ninterface IState {\n  context: string;\n  originImage: string;\n  compressedImage: string;\n  other: string;\n}\n// context消费方式1：Class.contextType\nclass Toolbar extends React.Component<any, never> {\n  static contextType = ThemeContext;\n\n  render() {\n    console.log(`${this.props.type}-Toolbar=======>`, this.context);\n    return <div>Toobar</div>;\n  }\n}\n// context消费方式2：Context.Consumer\nfunction Tooltip(props: any) {\n  return (\n    <ThemeContext.Consumer>\n      {(context) => {\n        console.log(`${props.type}-Tooltip--->`, context);\n        return <div>tooltip</div>;\n      }}\n    </ThemeContext.Consumer>\n  );\n}\n// Context修改方式：Context.Provider\nclass Context extends React.Component<IProps, IState> {\n  static contextType = ThemeContext;\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      context: 'Context-default',\n      originImage: '',\n      compressedImage: '',\n      other: ''\n    };\n  }\n\n  onChangeContext = () => {\n    this.setState({\n      context: 'Context-change'\n    });\n  };\n  onUploadFile = (event: any) => {\n    const fileList = event.target.files;\n    const file = fileList[0];\n    console.log('origin file===>', file);\n    const fileName = (file.name || '').split('.')[0] || '';\n    const fileRead = new FileReader();\n    const that = this;\n    fileRead.onloadend = function (event) {\n      if (this.result) {\n        that.setState(\n          {\n            originImage: this.result as string\n          },\n          () => {\n            const mimeType = 'image/jpeg';\n            const quality = 0.8;\n            compressImage(this.result as string, 200, mimeType, quality)\n              .then((res) => {\n                const newImage = new File([res], fileName, {\n                  type: mimeType,\n                  lastModified: Date.now()\n                });\n                const RD = new FileReader();\n                RD.onloadend = function () {\n                  if (this.result) {\n                    that.setState({\n                      compressedImage: this.result as string\n                    });\n                  }\n                };\n                RD.readAsDataURL(res);\n\n                console.log('compressedImage===>', newImage);\n              })\n              .catch((err: any) => {\n                console.log('图片压缩失败===>', err);\n              });\n          }\n        );\n      }\n    };\n    fileRead.readAsDataURL(file);\n  };\n  render() {\n    console.log('自己消费默认值Context-render==>', this.context);\n    const { originImage, compressedImage } = this.state;\n    return (\n      <div>\n        <div>\n          {compressedImage ? <img src={compressedImage} alt=\"\" /> : null}\n          {originImage ? <img src={originImage} alt=\"\" /> : null}\n        </div>\n        <input type=\"file\" multiple onChange={this.onUploadFile} />\n        <button onClick={this.onChangeContext}>change context</button>\n        <Toolbar type=\"first level\" />\n        <Tooltip type=\"first level\" />\n        <ThemeContext.Provider value={this.state.context}>\n          Context\n          <Toolbar type=\"child level\" />\n          <Tooltip type=\"child level\" />\n        </ThemeContext.Provider>\n      </div>\n    );\n  }\n}\nexport default Context;\n","// 最好后台全部包好，前端只根据错误码做交互的东西\nconst UNDEFINED_TEXT = \"未定义错误码\";\nconst ERROR_CODE_TO_MESSAGE: any = {\n  pegasus: {\n    1: \"1\",\n    2: \"2\",\n    3: \"3\",\n  },\n  unicorn: {\n    1: \"1\",\n    2: \"2\",\n    3: \"3\",\n  },\n};\n/*\n    一、cookie包装工具\n*/\n// cookie值不能存在逗号，分号，空格等特殊符号；\n// encodeURIComponent会编码这些特殊符号；但是JSON.stringify不会编码这些特殊符号\nexport function setCookie(\n  key: string,\n  value: string,\n  domain?: string,\n  expire?: number\n) {\n  let expires = \"\";\n  let date = new Date();\n  let days = expire || 30;\n  date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\n  expires = \"; expires=\" + date.toUTCString();\n\n  let cookie = domain\n    ? `${key}=${encodeURIComponent(value)}${expires}; path=/; domain=${domain}`\n    : `${key}=${encodeURIComponent(value)}${expires}; path=/`;\n  console.log(\"cookie===>\", cookie);\n  document.cookie = cookie;\n}\n\nexport function setCookieWithout(key: string, value: string, path?: string) {\n  console.log(\"path===>\", path);\n\n  document.cookie = `${key}=${encodeURIComponent(value)};path=${\n    path ? path : \"/\"\n  }`;\n}\n\nexport function getCookie(key: string) {\n  let arr,\n    reg = new RegExp(\"(^| )\" + key + \"=([^;]*)(;|$)\");\n  arr = document.cookie.match(reg);\n\n  if (!arr) {\n    return null;\n  } else {\n    let value = decodeURIComponent(arr[2]);\n    try {\n      return value ? JSON.parse(value) : null;\n    } catch (e) {\n      return value;\n    }\n  }\n}\n/*\n    二、错误码处理工具\n */\nexport function getMsgWithCode(name: string = \"pegasus\", code: number) {\n  const code_to_msg = ERROR_CODE_TO_MESSAGE[name];\n  if (code_to_msg === undefined) {\n    return UNDEFINED_TEXT;\n  }\n\n  if (code_to_msg[code] === undefined) {\n    return UNDEFINED_TEXT;\n  }\n\n  return code_to_msg[code];\n}\n\n/*\n    三、LOG工具\n */\nexport function log(msg: any) {\n  console.log(\"%c \" + msg + \" \", \"background: #00a3fe;color: #fff\");\n}\n\nexport function warning(msg: any) {\n  console.log(\"%c \" + msg + \" \", \"background: #ffff00;color: #000\");\n}\n\nexport function error(msg: any) {\n  console.log(\"%c \" + msg + \" \", \"background: #ff0000;color: #fff\");\n}\n/*\n    四、URL工具\n */\nexport function getUrlParamByName(name: string, url?: string) {\n  const reg = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`);\n  if (!url) {\n    url = window.location.href;\n  }\n  let res = url.match(reg);\n  if (res != null && res[2]) {\n    return decodeURIComponent(res[2]);\n  }\n  return undefined;\n}\n\nexport function compressImage(\n  imgSrc: string,\n  width: number = 300,\n  mimeType: string = \"image/jpeg\",\n  quality: number = 0.8\n): Promise<Blob> {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.src = imgSrc;\n    img.onload = function () {\n      const scale = img.height / img.width;\n      const canvas = document.createElement(\"canvas\");\n      // 使用目标图像大小指定画布大小，默认是300*150，会出现黑边\n      canvas.width = width;\n      canvas.height = width * scale;\n      const ctx = canvas.getContext(\"2d\");\n      // canvas画布大小\n      // drawImage将图片在画布上以width和width*scale为尺寸进行绘制\n      ctx && ctx.drawImage(img, 0, 0, width, width * scale);\n      canvas.toBlob(\n        function (blob: any) {\n          if (blob) {\n            resolve(blob);\n          } else {\n            reject();\n          }\n        },\n        mimeType,\n        quality\n      );\n    };\n  });\n}\n"],"sourceRoot":""}