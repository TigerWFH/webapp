{"version":3,"sources":["pages/canvas/index.module.scss","pages/canvas/components/Demo1/index.tsx","pages/canvas/components/Rect/index.tsx","pages/canvas/components/Path/index.tsx","pages/canvas/index.tsx"],"names":["module","exports","canvas","container","component","Demo1","props","ref","React","ctx","current","getContext","style","window","getComputedStyle","parentNode","width","parseInt","height","lineWidth","strokeRect","fillRect","beginPath","moveTo","lineTo","closePath","stroke","react","className","Rect","clearRect","Path","fill","arc","Math","PI","i","j","x","y","endAngle","anticlockwise","draw","quadraticCurveTo","bezierCurveTo","Canvas","styles","__webpack_require__","d","__webpack_exports__"],"mappings":"+EACAA,EAAAC,QAAA,CAAkBC,OAAA,uBAAAC,UAAA,0BAAAC,UAAA,gFCCH,SAASC,EAAMC,GAC1B,IAAMC,EAAMC,SAAgC,MA2B5C,OA1BAA,YAAgB,WACZ,IAAIC,EAAM,KACV,GAAoB,OAAhBF,EAAIG,QAAkB,CACtBD,EAAMF,EAAIG,QAAQC,WAAW,MAC7B,IAAMC,EAAQC,OAAOC,iBAAiBP,EAAIG,QAAQK,YAMlDR,EAAIG,QAAQM,MAAQC,SAASL,EAAMI,OACnCT,EAAIG,QAAQQ,OAASD,SAASL,EAAMM,QAE5B,OAART,IACAA,EAAIU,UAAY,GAChBV,EAAIW,WAAW,GAAI,IAAK,IAAK,KAC7BX,EAAIY,SAAS,IAAK,IAAK,GAAI,IAC3BZ,EAAIa,YACJb,EAAIc,OAAO,GAAI,KACfd,EAAIe,OAAO,IAAK,IAChBf,EAAIe,OAAO,IAAK,KAChBf,EAAIgB,YACJhB,EAAIiB,WAGT,IAECC,EAAA,wBAAQC,UAAWtB,EAAMsB,UAAWV,OAAQ,QAASX,IAAKA,IC5BnD,SAASsB,EAAKvB,GACzB,IAAMC,EAAMC,SAAgC,MA2B5C,OA1BAA,YAAgB,WACZ,IAAIC,EAAM,KACV,GAAoB,OAAhBF,EAAIG,QAAkB,CACtBD,EAAMF,EAAIG,QAAQC,WAAW,MAC7B,IAAMC,EAAQC,OAAOC,iBAAiBP,EAAIG,QAAQK,YAMlDR,EAAIG,QAAQM,MAAQC,SAASL,EAAMI,OACnCT,EAAIG,QAAQQ,OAASD,SAASL,EAAMM,QAE5B,OAART,IAEAA,EAAIY,SAAS,GAAI,GAAI,IAAK,KAC1BZ,EAAIqB,UAAU,GAAI,GAAI,GAAI,IAC1BrB,EAAIW,WAAW,GAAI,GAAI,GAAI,IAE3BX,EAAIY,SAAS,GAAI,IAAK,GAAI,IAC1BZ,EAAIW,WAAW,GAAI,IAAK,GAAI,IAC5BX,EAAIY,SAAS,GAAI,IAAK,GAAI,IAC1BZ,EAAIqB,UAAU,GAAI,IAAK,GAAI,MAGhC,IAECH,EAAA,wBAAQC,UAAWtB,EAAMsB,UAAWV,OAAQ,QAASX,IAAKA,ICLnD,SAASwB,EAAKzB,GACzB,IAAMC,EAAMC,SAAgC,MA2G5C,OA1GAA,YAAgB,WACZ,IAAIC,EAAM,KACV,GAAoB,OAAhBF,EAAIG,QAAkB,CACtBD,EAAMF,EAAIG,QAAQC,WAAW,MAC7B,IAAMC,EAAQC,OAAOC,iBAAiBP,EAAIG,QAAQK,YASlDR,EAAIG,QAAQM,MAAQC,SAASL,EAAMI,OACnCT,EAAIG,QAAQQ,OAASD,SAASL,EAAMM,QAE5B,OAART,IAoBAA,EAAIa,YACJb,EAAIc,OAAO,IAAK,IAChBd,EAAIe,OAAO,IAAK,IAChBf,EAAIe,OAAO,IAAK,IAChBf,EAAIuB,OAOJvB,EAAIa,YACJb,EAAIwB,IAAI,GAAI,GAAI,GAAI,EAAa,EAAVC,KAAKC,IAAQ,GACpC1B,EAAIc,OAAO,IAAK,IAChBd,EAAIwB,IAAI,GAAI,GAAI,GAAI,EAAGC,KAAKC,IAAI,GAChC1B,EAAIc,OAAO,GAAI,IACfd,EAAIwB,IAAI,GAAI,GAAI,EAAG,EAAa,EAAVC,KAAKC,IAAQ,GACnC1B,EAAIc,OAAO,GAAI,IACfd,EAAIwB,IAAI,GAAI,GAAI,EAAG,EAAa,EAAVC,KAAKC,IAAQ,GACnC1B,EAAIiB,SAjFhB,SAAcjB,GACV,GAAY,OAARA,EAEA,IADA,IACS2B,EAAI,EAAGA,EADD,EACaA,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB5B,EAAIa,YACJ,IAAMgB,EAAI,IAAU,GAAJD,EACVE,EAAI,GAAS,GAAJH,EAGTI,EAAWN,KAAKC,GAAKD,KAAKC,GAAKE,EAAI,EACrCI,EAAgBL,EAAI,IAAM,EAE9B3B,EAAIwB,IAAIK,EAAGC,EALI,GACI,EAIeC,EAAUC,GACxCL,EAAI,EACJ3B,EAAIuB,OAGJvB,EAAIiB,UAmEZgB,CAAKjC,GACLA,EAAIa,YACJb,EAAIwB,IAAI,IAAK,IAAK,GAAI,EAAGC,KAAKC,IAAI,GAClC1B,EAAIuB,OACJvB,EAAIa,YACJb,EAAIwB,IAAI,IAAK,IAAK,GAAI,EAAGC,KAAKC,IAAI,GAClC1B,EAAIuB,OAiBLvB,EAAIa,YACJb,EAAIc,OAAO,IAAK,KAChBd,EAAIkC,iBAAiB,IAAK,IAAK,IAAK,OACpClC,EAAIkC,iBAAiB,IAAK,IAAK,IAAK,KACpClC,EAAIkC,iBAAiB,IAAK,IAAK,IAAK,KACpClC,EAAIkC,iBAAiB,IAAK,IAAK,IAAK,KACpClC,EAAIkC,iBAAiB,IAAK,IAAK,IAAK,OACpClC,EAAIkC,iBAAiB,IAAK,IAAK,IAAK,KACpClC,EAAIgB,YACJhB,EAAIiB,SAIHjB,EAAIa,YACJb,EAAIc,OAAO,GAAI,KACfd,EAAImC,cAAc,GAAI,IAAK,GAAI,IAAK,GAAI,KACxCnC,EAAImC,cAAc,GAAI,IAAK,GAAI,MAAO,GAAI,OAC1CnC,EAAImC,cAAc,GAAI,IAAK,GAAI,IAAK,GAAI,KACxCnC,EAAImC,cAAc,IAAK,IAAK,IAAK,IAAK,IAAK,OAC3CnC,EAAImC,cAAc,IAAK,MAAO,IAAK,IAAK,IAAK,KAC7CnC,EAAImC,cAAc,GAAI,IAAK,GAAI,IAAK,GAAI,KACxCnC,EAAIuB,SAET,IAECL,EAAA,wBAAQC,UAAWtB,EAAMsB,UAAWV,OAAQ,QAASX,IAAKA,2BClInD,SAASsC,EAAOvC,GAE3B,OACIqB,EAAA,qBAAKC,UAAWkB,IAAO5C,QACnByB,EAAA,qBAAKC,UAAWkB,IAAO3C,WACnBwB,EAAA,cAACI,EAAD,CAAMH,UAAWkB,IAAO1C,aAE5BuB,EAAA,qBAAKC,UAAWkB,IAAO3C,WACnBwB,EAAA,cAACE,EAAD,CAAMD,UAAWkB,IAAO1C,aAE5BuB,EAAA,qBAAKC,UAAWkB,IAAO3C,WACnBwB,EAAA,cAACtB,EAAD,CAAOuB,UAAWkB,IAAO1C,cAjBzC2C,EAAAC,EAAAC,EAAA,4BAAAJ","file":"static/js/22.c98b1a2f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"canvas\":\"canvas_canvas__28jIF\",\"container\":\"canvas_container__ihrUa\",\"component\":\"canvas_component__3CupA\"};","import * as React from \"react\"\n\nexport default function Demo1(props: any) {\n    const ref = React.useRef<HTMLCanvasElement>(null)\n    React.useEffect(() => {\n        let ctx = null\n        if (ref.current !== null) {\n            ctx = ref.current.getContext(\"2d\")\n            const style = window.getComputedStyle(ref.current.parentNode as Element)\n            /*\n                问题1：CSS样式限定canvas尺寸和canvas自身属性尺寸不是一回事\n                    canvas画布大小默认是300*150,\n                    CSS样式规则 则是canvas画布在screen展示尺寸（画布大小和CSS规则不一致，会被缩放拉伸）\n            */ \n            ref.current.width = parseInt(style.width as string)\n            ref.current.height = parseInt(style.height as string) // 能够解析\"978px\",Number不能\n        }\n        if (ctx !== null) {\n            ctx.lineWidth = 10\n            ctx.strokeRect(75, 140, 150, 110)\n            ctx.fillRect(130, 190, 40, 60)\n            ctx.beginPath()\n            ctx.moveTo(50, 140)\n            ctx.lineTo(150, 60)\n            ctx.lineTo(250, 140)\n            ctx.closePath()\n            ctx.stroke()\n\n        }\n    }, [])\n    return (\n        <canvas className={props.className} height={\"300px\"} ref={ref}></canvas>\n    )\n}","// 矩形Rectangular\nimport * as React from \"react\"\n\nexport default function Rect(props: any) {\n    const ref = React.useRef<HTMLCanvasElement>(null)\n    React.useEffect(() => {\n        let ctx = null\n        if (ref.current !== null) {\n            ctx = ref.current.getContext(\"2d\")\n            const style = window.getComputedStyle(ref.current.parentNode as Element)\n            /*\n                问题1：CSS样式限定canvas尺寸和canvas自身属性尺寸不是一回事\n                    canvas画布大小默认是300*150,\n                    CSS样式规则 则是canvas画布在screen展示尺寸（画布大小和CSS规则不一致，会被缩放拉伸）\n            */ \n            ref.current.width = parseInt(style.width as string)\n            ref.current.height = parseInt(style.height as string) // 能够解析\"978px\",Number不能\n        }\n        if (ctx !== null) {\n            // ctx.lineWidth = 10\n            ctx.fillRect(25, 25, 100, 100)\n            ctx.clearRect(45, 45, 60, 60)\n            ctx.strokeRect(50, 50, 50, 50)\n\n            ctx.fillRect(25, 130, 50, 50)\n            ctx.strokeRect(25, 190, 50, 50)\n            ctx.fillRect(25, 245, 60, 60)\n            ctx.clearRect(30, 250, 50, 50)\n\n        }\n    }, [])\n    return (\n        <canvas className={props.className} height={\"300px\"} ref={ref}></canvas>\n    )\n}","// 矩形Rectangular\nimport * as React from \"react\"\n\nfunction draw(ctx: CanvasRenderingContext2D) {\n    if (ctx !== null) {\n        const length = 4\n        for (let i = 0; i < length; i++) {\n            for (let j = 0; j < 3; j++) {\n                ctx.beginPath()\n                const x = 240 + j * 50\n                const y = 50 + i * 50\n                const radius = 20\n                const beginAngle = 0\n                const endAngle = Math.PI + Math.PI * j / 2\n                var anticlockwise = i % 2 === 0 ? false : true\n\n                ctx.arc(x, y, radius, beginAngle, endAngle, anticlockwise)\n                if (i > 1) {\n                    ctx.fill()\n                }\n                else {\n                    ctx.stroke()\n                }\n            }\n        }\n    }\n}\nexport default function Path(props: any) {\n    const ref = React.useRef<HTMLCanvasElement>(null)\n    React.useEffect(() => {\n        let ctx = null\n        if (ref.current !== null) {\n            ctx = ref.current.getContext(\"2d\")\n            const style = window.getComputedStyle(ref.current.parentNode as Element)\n            /*\n                问题1：CSS样式限定canvas尺寸和canvas自身属性尺寸不是一回事\n                    canvas画布大小默认是300*150,\n                    CSS样式规则 则是canvas画布在screen展示尺寸（画布大小和CSS规则不一致，会被缩放拉伸）\n                问题2：当前点（current position）确定\n                    moveTo(x0, y0)直接指定当前点\n                    lineTo(x, y)等函数在操作结束后会更新当前点为x,y\n            */ \n            ref.current.width = parseInt(style.width as string)\n            ref.current.height = parseInt(style.height as string) // 能够解析\"978px\",Number不能\n        }\n        if (ctx !== null) {\n            /*\n                canvas仅支持两种形式的图形绘制：矩形和路径\n                路径：是通过不同颜色很宽度的线段或曲线相连形成的不同形状的点的集合。路径是闭合的。图形的基本元素是路径\n                绘制路径步骤：\n                    1、绘制起始点: \n                    2、画路径\n                    3、路径闭合\n                    4、描边或填充路径绘制图形\n                    beginPath()：绘制路径，初始化上下文\n                    moveTo(x, y)：移动画笔函数，移动画笔到指定点\n                    lineTo(x, y)：绘线函数，绘制从当前位置到指定位置(x,y)的直线\n                    closePath()：绘制完成\n                    stroke()描边函数，调用前不会处理未闭合的路径\n                    fill()填充函数，调用前没有闭合的路径会被自动闭合\n\n            */\n            /*\n                绘制三角形\n            */\n            ctx.beginPath()\n            ctx.moveTo(125, 50)\n            ctx.lineTo(150, 75)\n            ctx.lineTo(150, 25)\n            ctx.fill()\n            /*\n                笑脸\n                弧度参数（非角度参数）\n                arc(x, y, radius, startAngle, endAngle, anticlockwise)\n                arcTo(x1, y1, x2, y2, radius)\n            */ \n            ctx.beginPath()\n            ctx.arc(75, 75, 50, 0, Math.PI * 2, true) // 顺时针\n            ctx.moveTo(110, 75)\n            ctx.arc(75, 75, 35, 0, Math.PI, false) // 逆时针\n            ctx.moveTo(65, 65)\n            ctx.arc(60, 65, 5, 0, Math.PI * 2, true) // 左眼\n            ctx.moveTo(95, 65)\n            ctx.arc(90, 65, 5, 0, Math.PI * 2, true) // 右眼\n            ctx.stroke()\n            /*\n                各种弧度\n            */ \n            draw(ctx)\n            ctx.beginPath()\n            ctx.arc(450, 120, 60, 0, Math.PI, true) // true逆时针\n            ctx.fill()\n            ctx.beginPath()\n            ctx.arc(450, 180, 60, 0, Math.PI, false) // true逆时针\n            ctx.fill()\n            /*\n                贝塞尔曲线：学习资料https://www.jasondavies.com/animated-bezier/\n                    定义：起始点、终止点（锚点）、控制点。通过调整控制点，贝塞尔曲线的形状会发生变化。\n                控制点和结束点\n                    1次贝塞尔曲线公式：已知起始点P0、终止点Pn，引入参数t，取值[0, 1]\n                        B1 = (1-t)P0 + tPn\n                    2次贝塞尔曲线公式：已知起始点P0、终止点Pn，控制点Pc，引入参数t，取值[0, 1]\n                        递推计算方式\n                        计算间接控制点Pc1和Pc2：\n                            Pc1 = (1-t)P0 + tPc\n                            Pc2 = (1-t)Pc + tPn\n                        计算二次贝塞尔曲线：\n                            B2 = (1-t)Pc1 + tPc2，带入间接控制点Pc1和Pc2\n                参数是控制点和结束点\n                二次贝塞尔曲线：quadraticCurveTo(cp1x, cp1y, x, y)\n            */\n           ctx.beginPath()\n           ctx.moveTo(275, 225) // 起始点\n           ctx.quadraticCurveTo(225, 225, 225, 262.5) // 控制点和结束点\n           ctx.quadraticCurveTo(225, 300, 250, 300)\n           ctx.quadraticCurveTo(250, 320, 230, 325)\n           ctx.quadraticCurveTo(260, 320, 265, 300)\n           ctx.quadraticCurveTo(325, 300, 325, 262.5)\n           ctx.quadraticCurveTo(325, 225, 275, 225)\n           ctx.closePath()\n           ctx.stroke()\n        /*\n            三次贝塞尔曲线：bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)\n        */   \n            ctx.beginPath()\n            ctx.moveTo(75, 240)\n            ctx.bezierCurveTo(75, 237, 70, 225, 50, 225)\n            ctx.bezierCurveTo(20, 225, 20, 262.5, 20, 262.5);\n            ctx.bezierCurveTo(20, 280, 40, 302, 75, 320);\n            ctx.bezierCurveTo(110, 302, 130, 280, 130, 262.5);\n            ctx.bezierCurveTo(130, 262.5, 130, 225, 100, 225);\n            ctx.bezierCurveTo(85, 225, 75, 237, 75, 240);\n            ctx.fill();\n        }\n    }, [])\n    return (\n        <canvas className={props.className} height={\"300px\"} ref={ref}></canvas>\n    )\n}","import * as React from \"react\"\nimport Demo1 from \"./components/Demo1\"\nimport Rect from \"./components/Rect\"\nimport Path from \"./components/Path\"\nimport styles from \"./index.module.scss\"\n\nexport default function Canvas(props: any) {\n    \n    return (\n        <div className={styles.canvas}>\n            <div className={styles.container}>\n                <Path className={styles.component}/>\n            </div>\n            <div className={styles.container}>\n                <Rect className={styles.component}/>\n            </div>\n            <div className={styles.container}>\n                <Demo1 className={styles.component}/>\n            </div>\n        </div>\n    )\n}"],"sourceRoot":""}