@startuml 提供了大量操作Array的静态函数工具
    class Arrays {
        - {static} final int MIN_ARRAY_SORT_GRAN
        - Arrays()
        - {static} void rangeCheck(int arrayLength, int fromIndex, int toIndex)
        + {static} void sort(int[] a)
        + {static} void parallelSort(byte[] a)
        + {static} <T extends Comparable<? super T>> void parallelSort(T[] a)
        + {static} void sort(Object[] a)
        - {static} void legacyMergeSort(Object[] a)
        - {static} void mergeSort(Object[] src, Object[] dest, int low, int high, int off)
        - {static} void swap(Object[] x, int a, int b)
        + {static} <T> void parallelPrefix(T[] array, BinaryOperator<T> op)
        + {static} void parallelPrefix(int[] array, IntBinaryOperator op)
        + {static} void parallelPrefix(int[] array, int fromIndex, int toIndex, IntBinaryOperator op)
        + {static} int binarySearch(long[] a, long key)
        + {static} int binarySearch(long[] a, int fromIndex, int toIndex, long key)
        - {static} int binarySearch0(long[] a, int fromIndex, int toIndex, long key)
        + {static} int binarySearch(int[] a, int key)
        + {static} int binarySearch(int[] a, int fromIndex, int toIndex, int key)
        - {static} int binarySearch0(int[] a, int fromIndex, int toIndex, int key)
        + {static} int binarySearch(short[] a, short key)
        + {static} int binarySearch(short[] a, int fromIndex, int toIndex, short key)
        - {static} int binarySearch0(short[] a, int fromIndex, int toIndex, short key)
        + {static} int binarySearch(char[] a, char key)
        + {static} int binarySearch(char[] a, int fromIndex, int toIndex, char key)
        - {static} int binarySearch0(char[] a, int fromIndex, int toIndex, char key)
        + {static} int binarySearch(byte[] a, byte key)
        + {static} int binarySearch(byte[] a, int fromIndex, int toIndex, byte key)
        - {static} int binarySearch0(byte[] a, int fromIndex, int toIndex, byte key)
        + {static} boolean equals(char[] a, char[] a2)
        + {static} void fill(long[] a, long val)
        + {static} <T> T[] copyOf(T[] original, int newLength)
        + {static} <T> T[] copyOfRange(T[] original, int from, int to)
        + {static} <T> List<T> asList(T... a)
        + {static} int hashCode(long a[])
        + {static} int deepHashCode(Object a[])
        + {static} boolean deepEquals(Object[] a1, Object[] a2)
        + {static} String toString(long[] a)
        + {static} String deepToString(Object[] a)
        + {static} <T> void setAll(T[] array, IntFunction<? extends T> generator)
        + {static} <T> void parallelSetAll(T[] array, IntFunction<? extends T> generator)
        + {static} <T> Spliterator<T> spliterator(T[] array)
        + {static} <T> Stream<T> stream(T[] array)

    }
    class String {
        + String()
        + String(String original)
        + String(char value[])
        + String(char value[], int offset, int count)
        + String(int[] codePoints, int offset, int count)
        + String(byte ascii[], int hibyte, int offset, int count)
        + String(byte ascii[], int hibyte)
        - {static} void checkBounds(byte[] bytes, int offset, int length)
        + String(byte bytes[], int offset, int length, String charsetName)
        + String(byte bytes[], int offset, int length, Charset charset)
        + String(byte bytes[], String charsetName)
        + String(byte bytes[], Charset charset)
        + String(byte bytes[], int offset, int length)
        + String(byte bytes[])
        + String(StringBuffer buffer)
        + String(StringBuilder builder)
        String(char[] value, boolean share)
        + int length()
        + boolean isEmpty()
        + char charAt(int index)
        + int codePointAt(int index)
        + int codePointBefore(int index)
        + int codePointCount(int beginIndex, int endIndex)
        + int offsetByCodePoints(int index, int codePointOffset)
        void getChars(char dst[], int dstBegin)
        + void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin)
        + void getBytes(int srcBegin, int srcEnd, byte dst[], int dstBegin)
        + byte[] getBytes(String charsetName)
        + byte[] getBytes(Charset charset)
        + byte[] getBytes()
        + boolean equals(Object anObject)
        + boolean contentEquals(StringBuffer sb)
        - boolean nonSyncContentEquals(AbstractStringBuilder sb)
        + boolean contentEquals(CharSequence cs)
        + boolean equalsIgnoreCase(String anotherString)
        + int compareTo(String anotherString)
        + int compareToIgnoreCase(String str)
        + boolean regionMatches(int toffset, String other, int ooffset, int len)
        + boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)
        + boolean startsWith(String prefix, int toffset)
        + boolean startsWith(String prefix)
        + boolean endsWith(String suffix)
        + int hashCode()
        + int indexOf(int ch)
        + int indexOf(int ch, int fromIndex)
        - int indexOfSupplementary(int ch, int fromIndex)
        + int lastIndexOf(int ch)
        + int lastIndexOf(int ch, int fromIndex)
        - int lastIndexOfSupplementary(int ch, int fromIndex)
        + int indexOf(String str)
        + int indexOf(String str, int fromIndex)
        {static} int indexOf(char[] source, int sourceOffset, int sourceCount, String target, int fromIndex)
        {static} int indexOf(char[] source, int sourceOffset, int sourceCount, char[] target, int targetOffset, int targetCount, int fromIndex)
        + int lastIndexOf(String str)
        + int lastIndexOf(String str, int fromIndex)
        {static} int lastIndexOf(char[] source, int sourceOffset, int sourceCount, String target, int fromIndex)
        {static} int lastIndexOf(char[] source, int sourceOffset, int sourceCount, char[] target, int targetOffset, int targetCount, int fromIndex)
        + String substring(int beginIndex)
        + String substring(int beginIndex, int endIndex)
        + CharSequence subSequence(int beginIndex, int endIndex)
        + String concat(String str)
        + String replace(char oldChar, char newChar)
        + boolean matches(String regex)
        + boolean contains(CharSequence s)
        + String replaceFirst(String regex, String replacement)
        + String replaceAll(String regex, String replacement)
        + String replace(CharSequence target, CharSequence replacement)
        + String[] split(String regex, int limit)
        + String[] split(String regex)
        + {static} String join(CharSequence delimiter, CharSequence... elements)
        + {static} String join(CharSequence delimiter, Iterable<? extends CharSequence> elements)
        + String toLowerCase(Locale locale)
        + String toLowerCase()
        + String toUpperCase(Locale locale)
        + String toUpperCase()
        + String trim()
        + String toString()
        + char[] toCharArray()
        + {static} String format(String format, Object... args)
        + {static} String format(Locale l, String format, Object... args)
        + {static} String valueOf(Object obj)
        + {static} String valueOf(char data[])
        + {static} String valueOf(char data[], int offset, int count)
        + {static} String copyValueOf(char data[], int offset, int count)
        + {static} String copyValueOf(char data[])
        + {static} String valueOf(boolean b)
        + {static} String valueOf(char c)

    }
@enduml